#[cfg(test)]
use super::{get_base_solution, Cell, Grid, Group};

#[test]
fn get_row() {
    let expected: Group = core::array::from_fn(|i| Cell::Given((i + 1).try_into().unwrap()));
    let g = Grid::from(get_base_solution());

    assert_eq!(g.get_row(0), &expected);
}

#[test]
fn from_returns_correct_vals() {
    let expected_rows = [
        [
            Cell::Given(1),
            Cell::Given(2),
            Cell::Given(3),
            Cell::Given(4),
            Cell::Given(5),
            Cell::Given(6),
            Cell::Given(7),
            Cell::Given(8),
            Cell::Given(9),
        ],
        [
            Cell::Given(4),
            Cell::Given(5),
            Cell::Given(6),
            Cell::Given(7),
            Cell::Given(8),
            Cell::Given(9),
            Cell::Given(1),
            Cell::Given(2),
            Cell::Given(3),
        ],
        [
            Cell::Given(7),
            Cell::Given(8),
            Cell::Given(9),
            Cell::Given(1),
            Cell::Given(2),
            Cell::Given(3),
            Cell::Given(4),
            Cell::Given(5),
            Cell::Given(6),
        ],
        [
            Cell::Given(2),
            Cell::Given(3),
            Cell::Given(4),
            Cell::Given(5),
            Cell::Given(6),
            Cell::Given(7),
            Cell::Given(8),
            Cell::Given(9),
            Cell::Given(1),
        ],
        [
            Cell::Given(5),
            Cell::Given(6),
            Cell::Given(7),
            Cell::Given(8),
            Cell::Given(9),
            Cell::Given(1),
            Cell::Given(2),
            Cell::Given(3),
            Cell::Given(4),
        ],
        [
            Cell::Given(8),
            Cell::Given(9),
            Cell::Given(1),
            Cell::Given(2),
            Cell::Given(3),
            Cell::Given(4),
            Cell::Given(5),
            Cell::Given(6),
            Cell::Given(7),
        ],
        [
            Cell::Given(3),
            Cell::Given(4),
            Cell::Given(5),
            Cell::Given(6),
            Cell::Given(7),
            Cell::Given(8),
            Cell::Given(9),
            Cell::Given(1),
            Cell::Given(2),
        ],
        [
            Cell::Given(6),
            Cell::Given(7),
            Cell::Given(8),
            Cell::Given(9),
            Cell::Given(1),
            Cell::Given(2),
            Cell::Given(3),
            Cell::Given(4),
            Cell::Given(5),
        ],
        [
            Cell::Given(9),
            Cell::Given(1),
            Cell::Given(2),
            Cell::Given(3),
            Cell::Given(4),
            Cell::Given(5),
            Cell::Given(6),
            Cell::Given(7),
            Cell::Given(8),
        ],
    ];
    let expected_cols = [
        [
            Cell::Given(1),
            Cell::Given(4),
            Cell::Given(7),
            Cell::Given(2),
            Cell::Given(5),
            Cell::Given(8),
            Cell::Given(3),
            Cell::Given(6),
            Cell::Given(9),
        ],
        [
            Cell::Given(2),
            Cell::Given(5),
            Cell::Given(8),
            Cell::Given(3),
            Cell::Given(6),
            Cell::Given(9),
            Cell::Given(4),
            Cell::Given(7),
            Cell::Given(1),
        ],
        [
            Cell::Given(3),
            Cell::Given(6),
            Cell::Given(9),
            Cell::Given(1),
            Cell::Given(4),
            Cell::Given(7),
            Cell::Given(2),
            Cell::Given(5),
            Cell::Given(8),
        ],
        [
            Cell::Given(4),
            Cell::Given(7),
            Cell::Given(1),
            Cell::Given(5),
            Cell::Given(2),
            Cell::Given(8),
            Cell::Given(6),
            Cell::Given(9),
            Cell::Given(3),
        ],
        [
            Cell::Given(5),
            Cell::Given(8),
            Cell::Given(2),
            Cell::Given(6),
            Cell::Given(9),
            Cell::Given(3),
            Cell::Given(7),
            Cell::Given(1),
            Cell::Given(4),
        ],
        [
            Cell::Given(6),
            Cell::Given(9),
            Cell::Given(3),
            Cell::Given(7),
            Cell::Given(1),
            Cell::Given(4),
            Cell::Given(8),
            Cell::Given(2),
            Cell::Given(5),
        ],
        [
            Cell::Given(7),
            Cell::Given(1),
            Cell::Given(4),
            Cell::Given(8),
            Cell::Given(2),
            Cell::Given(5),
            Cell::Given(9),
            Cell::Given(3),
            Cell::Given(6),
        ],
        [
            Cell::Given(8),
            Cell::Given(2),
            Cell::Given(5),
            Cell::Given(9),
            Cell::Given(3),
            Cell::Given(6),
            Cell::Given(1),
            Cell::Given(4),
            Cell::Given(7),
        ],
        [
            Cell::Given(9),
            Cell::Given(3),
            Cell::Given(6),
            Cell::Given(1),
            Cell::Given(4),
            Cell::Given(7),
            Cell::Given(2),
            Cell::Given(5),
            Cell::Given(8),
        ],
    ];
    // let expected_boxes = [[1,2,3,4,5,6,7,8,9],[4,5,6,7,8,9,1,2,3],[7,8,9,1,2,3,4,5,6],[2,3,4,]]
    let g = Grid::from(get_base_solution());

    assert_eq!(g.rows, expected_rows);
    assert_eq!(g.cols, expected_cols);
    assert_eq!(g.boxes, expected_rows);
}
